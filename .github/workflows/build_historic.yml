name: build-historic
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: The TeXLive version to be built
        required: true
      deploy:
        type: boolean
        description: Whether to deploy the build images
jobs:
  build_historic:
    strategy:
      matrix:
        include:
          - name: texlive-histroic-alpine-amd64
            os: alpine
            platform: linux/amd64
            runs-on: ubuntu-latest
            tag: ghcr.io/xu-cheng/texlive-histroic-alpine
          - name: texlive-histroic-debian-amd64
            os: debian
            platform: linux/amd64
            runs-on: ubuntu-latest
            tag: ghcr.io/xu-cheng/texlive-histroic-debian
          - name: texlive-histroic-debian-arm64
            os: debian
            platform: linux/arm64
            runs-on: ubuntu-24.04-arm
            tag: ghcr.io/xu-cheng/texlive-histroic-debian
    name: Build Historic TeXLive [${{ matrix.name }}, version=${{ inputs.version }}]
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.${{ matrix.os }}
          build-args: version=${{ inputs.version }}
          platforms: ${{ matrix.platform }}
          tags: ${{ matrix.name }}
          load: true
      - name: Test pdflatex
        run: |
          docker run --rm ${{ matrix.name }} pdflatex --version
          docker run --rm -v "$(pwd)/test:/workspace" -w /workspace ${{ matrix.name }} \
            make test-pdflatex
      - name: Test bibtex
        run: |
          docker run --rm -v "$(pwd)/test:/workspace" -w /workspace ${{ matrix.name }} \
            make test-bibtex
      - name: Test biblatex
        run: |
          docker run --rm -v "$(pwd)/test:/workspace" -w /workspace ${{ matrix.name }} \
            make test-biblatex
        if: "!(matrix.platform == 'linux/arm64' && fromJSON(inputs.version) <= 2022)"
      - name: Test latexindent
        run: |
          docker run --rm -v "$(pwd)/test:/workspace" -w /workspace ${{ matrix.name }} \
            make test-latexindent
      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
        if: "inputs.deploy"
      - name: Deploy Alpine
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.${{ matrix.os }}
          build-args: version=${{ inputs.version }}
          platforms: ${{ matrix.platform }}
          tags: ${{ matrix.tag }}:${{ inputs.version }}
          push: true
        if: "inputs.deploy && matrix.os == 'alpine'"
      - name: Deploy Debian
        id: push_debian
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.${{ matrix.os }}
          build-args: version=${{ inputs.version }}
          platforms: ${{ matrix.platform }}
          tags: ${{ matrix.tag }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        if: "inputs.deploy && matrix.os == 'debian'"
      - name: Export Debian digest
        run: |
          mkdir -p "${{ runner.temp }}/digests"
          digest="${{ steps.push_deiban.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
        if: "inputs.deploy && matrix.os == 'debian'"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.name }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
        if: "inputs.deploy && matrix.os == 'debian'"

  merge:
    if: "inputs.deploy"
    name: Merge Debian images
    runs-on: ubuntu-latest
    needs:
      - build_historic
    env:
      TAG: ghcr.io/xu-cheng/texlive-histroic-debian
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-texlive-histroic-debian-*
          merge-multiple: true
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create --tag "${{ env.TAG }}:${{ inputs.version }}" $(printf "${{ env.TAG }}@sha256:%s " *)
      - name: Inspect images
        run: |
          docker buildx imagetools inspect "${{ env.TAG }}:${{ inputs.version }}"
